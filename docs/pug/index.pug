doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')
    title reveal.js
    link(rel='stylesheet', href='css/reveal.css')
    link(rel='stylesheet', href='css/theme/black.css')
    link(rel='stylesheet', href='lib/css/zenburn.css')
    link(rel='stylesheet', href='css/main.css')
    link(rel='stylesheet', href='css/font-awesome-4.7.0/css/font-awesome.css')
    script.
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
  body
    .reveal
      .slides
        section
            h1 資料庫期末專案報告
        section
            section
                h1 0. 簡介
            section
                h1 0.1 組員名單
                h3(style="color: #00BFFF") 陳耀銘
                h3 賴韋豪
                h3 江彥融
                h3 林霈瑜
            //- section(data-markdown)
            //-     textarea(data-template).
            section
                h1 0.2 使用工具
                p(style="font-size: 80px;")
                    img(src="img/Visual_Studio_Code.png", height="100px", width="100px", style="position: relative; top: 40px;")
                    |  Visual Studio Code
                img(src="img/mysql.png", height="20%", width="20%", style="position: relative; right: 40px;")
                img(src="img/git.png", height="20%", width="20%", style="position: relative; left: 40px;")
            section
                h1 0.2 使用技術(前端)
                a(href="http://gulpjs.com/")
                    img(src="img/gulp.png", height="10%", width="10%")
                a(href="http://sass-lang.com/")
                    img(src="img/sass.svg", height="20%", width="20%", style="position: relative; left: 20px;")
                a(href="https://pugjs.org")
                    img(src="img/pug.svg", height="20%", width="20%")
                a(href="https://cn.vuejs.org/")
                    img(src="img/vue.png", height="20%", width="20%")
                a(href="https://babeljs.io/")
                    img(src="img/babel.png", height="40%", width="40%")
                a(href="http://eslint.org/")
                    img(src="img/eslint.svg", height="20%", width="20%")
                a(href="https://v4-alpha.getbootstrap.com/")
                    img(src="img/bootstrap.png", height="20%", width="20%")
            section
                h1 0.3 使用技術(後端)
                img(src="img/flask.png", height="100%", width="100%")
            section
                h1 0.4 使用技術(爬蟲)
                img(src="img/python.svg", height="70%", width="70%")
                p Packages: requests, BeautifulSoup
            section
                h1 0.5 參考書籍
                img(src="img/book.png", height="40%", width="40%")
        section
            h1(style="position: relative; top: 52px;") 1. 建立
            img(src="img/GitHub-Mark-Light-120px-plus.png", style="position: relative; bottom: 60px;")
            img(src="img/papapa.png", height="50%", width="50%", style="position: relative; bottom: 15px;")
            p(style="font-size: 100px; position: relative; bottom: 100px;") Repository
            a(href="https://github.com/tommy1994111/db-project-car", style="font-size: 60px; position: relative; bottom: 100px;")
                i.fa.fa-github(aria-hidden="true")
                |  tommy1994111/db-project-car
        section
            section
                h1 2. 建立資料夾架構
            section
                img(src="img/directory.png", height="40%", width="40%", style="position: relative;")
        section
            section
                h1 3. 功能發想
            section
                h1 3.1 
        section
            h1 4. 建立資料庫
            img(src="img/schema.png")
        section
            h1 5. 資料抓取(爬蟲)
            pre
                code.hljs.python.
                    from bs4 import BeautifulSoup as bs
                    import requests as rq
                    import json
                    import urllib
                    from connectToMySQL import connectToMySQL, executeSQL
                    from collections import OrderedDict
                    MAIN_LINK = 'http://www.sum.com.tw/'

                    def getSoup(link):
                        '''取得response且使用BeautifulSoup parse HTML'''
                        response = rq.get(link)
                        soup = bs(response.text, 'lxml')
                        return soup

                    mainSoup = getSoup(MAIN_LINK)

                    # 取得廠牌列表
                    brandList = [brand.get('value') for brand in mainSoup.select('select#brand')[0].select('option')]

                    def fetchBrandData(brand):
                        '''取得廠牌之二手車資料後傳入資料庫'''
                        page = 1
                        searchLink = 'http://www.sum.com.tw/result1_all.php?brand={}&year=1995&year1=2017&page={}'
                        brandLink = urllib.parse.quote(searchLink.format(brand, page), safe = '=/:?&')
                        print(brandLink)
                        brandSoup = getSoup(brandLink)
                        try:
                            totalPages = int(brandSoup.select('p.goTo')[0].select('b')[1].text)
                        except IndexError:
                            totalPages = 0
                        print(totalPages)
                        def fetchUlData(soup):
                            data = OrderedDict([
                                    ('dataLink' , urllib.parse.quote(MAIN_LINK + soup.select('a')[0].get('href'), safe = '=/:?&')),
                                    ('imgLink' , urllib.parse.quote(MAIN_LINK + str(soup.select('img')[0].get('data-original')), safe = '=/:?&')),
                                    ('brand', brand),
                                    ('carModel' , soup.select('li.carInfo')[0].select('p')[0].text.strip().replace(brand + ' ', '').replace('廂車', '').replace('貨車', '')),
                                    ('merchant' , soup.select('p.iconArrow01')[0].select('a')[0].text.strip()),
                                    ('shift' , soup.select('p.iconArrow01')[1].text[3:].strip()),
                                    ('updateTime' , soup.select('p.iconArrow01')[2].text[7:].strip()),
                                    ('price' , soup.select('li.carPrice')[0].text.strip().replace('萬', '')),
                                    ('year' , soup.select('li.carYear')[0].text.strip()),
                                    ('displacement' , soup.select('li.carL')[0].text.strip()), # 排氣量
                                    ('region' , soup.select('li.carRegion')[0].text.strip()),
                                    # http://www.sum.com.tw/images/icon/iconMark06.gif
                                ])
                            return data
                        connection = connectToMySQL()
                        if totalPages != 0:
                            for page in range(1, totalPages + 1):
                                soup = getSoup(searchLink.format(brand, page))
                                for dataSoup in soup.select('div.searchResults ul'):
                                    data = fetchUlData(dataSoup)
                                    if data['price'] == '已收訂':
                                        pass
                                    else:
                                        sql = "INSERT INTO `data` (`dataLink`, `imgLink`, `brand`, `carModel`, `merchant`, `shift`, `updateTime`, `price`, `year`, `displacement`, `region`) VALUES {}".format(tuple(data.values()))
                                        print(sql)
                                        executeSQL(connection, sql)
                        else:
                            pass
                        connection.close()

                    print(len(brandList))
                    count = 0
                    for brand in brandList:
                        count += 1
                        print(count, '|', brand)
                        if brand != '':
                            fetchBrandData(brand)
        section
            h1 6. 建立前端
            code index.html
            img(src="img/index_page.png")
        section
            h1 7. 建立後端
            code runServer.py
            pre
                code.hljs.python.
                    from backend.connectToMySQL import connectToMySQL as MySQL
                    from flask import Flask, render_template, request, jsonify
                    import os

                    FRONTEND_PATH = os.path.join('frontend', 'dist')

                    HOST = 'localhost'
                    USER = 'user'
                    PASSWORD = 'password'
                    DB = 'cars'

                    app = Flask(__name__, template_folder=FRONTEND_PATH,
                                static_folder=FRONTEND_PATH)

                    app.config.update(
                        DEBUG=True,
                        TEMPLATES_AUTO_RELOAD=True,
                        SEND_FILE_MAX_AGE_DEFAULT=1,
                    )

                    @app.route("/")
                    def hello():
                        return render_template('index.html')


                    @app.route("/api/select", methods=['GET', 'POST'])
                    def select():
                        if request.method == 'GET':
                            return 'select'
                        elif request.method == 'POST':
                            mysql = MySQL(host = HOST,
                                        user = USER,
                                        password = PASSWORD,
                                        db = DB
                                        )
                            if request.json == {}:
                                mysql.executeSQL({
                                    'type': 'SELECT',
                                    'targetColumns': '*',
                                    'targetTable': 'data',
                                    'addition': 'ORDER BY `updateTime` LIMIT 0, 10'
                                })
                            else:
                                sqlDict = {
                                    'type': 'SELECT',
                                    'targetColumns': '*',
                                    'targetTable': 'data',
                                    'addition': '{} ORDER BY `updateTime` LIMIT {}, 10'
                                }
                                additions = list()
                                if (request.json['brand']):
                                    additions.append(
                                        '`brands` = "{}"'.format(request.json['brand']))
                                if (request.json['shift']):
                                    additions.append(
                                        '`shifts` = "{}"'.format(request.json['shift']))
                                if (request.json['year']):
                                    additions.append(
                                        '`years` >= "{}"'.format(request.json['year']))
                                if (request.json['region']):
                                    additions.append(
                                        '`regions` = "{}"'.format(request.json['region']))
                                if (request.json['price']['min']):
                                    additions.append(
                                        '`price` >= "{}"'.format(request.json['price']['min']))
                                if (request.json['price']['max']):
                                    additions.append(
                                        '`price` <= "{}"'.format(request.json['price']['max']))
                                if (request.json['displacement']['min']):
                                    additions.append(
                                        '`displacement` >= "{}"'.format(request.json['displacement']['min']))
                                if (request.json['displacement']['max']):
                                    additions.append(
                                        '`displacement` <= "{}"'.format(request.json['displacement']['max']))
                                if additions != list():
                                    sqlDict['addition'] = sqlDict['addition'].format("WHERE ({})".format(
                                        ' AND '.join(additions)), (request.json['page'] - 1) * 10)
                                else:
                                    sqlDict['addition'] = sqlDict['addition'].format('', (request.json['page'] - 1) * 10)
                                # print('\n\n', sqlDict['addition'], '\n\n')
                                mysql.executeSQL(sqlDict)
                            return jsonify(mysql.executeResult)

                    @app.route("/api/distinct", methods=['GET', 'POST'])
                    def distinct():
                        if request.method == 'GET':
                            return 'distinct'
                        elif request.method == 'POST':
                            mysql = MySQL(host = HOST,
                                        user = USER,
                                        password = PASSWORD,
                                        db = DB
                                        )
                            mysql.executeSQL({
                                'type': 'SELECT DISTINCT',
                                'targetColumn': request.json['targetColumn'],
                                'targetTable': 'data',
                                'addition': ''
                            })
                            return jsonify(mysql.executeResult)

                    @app.route("/api/countPage", methods=['GET', 'POST'])
                    def countPage():
                        # TODO: 修改之
                        if request.method == 'GET':
                            return 'countPage'
                        elif request.method == 'POST':
                            mysql = MySQL(host=HOST,
                                        user=USER,
                                        password=PASSWORD,
                                        db=DB
                                        )
                            mysql.executeSQL({
                                'type': 'SELECT COUNT(*)',
                                'targetTable': 'data',
                                'addition': ''
                            })
                            return jsonify(mysql.executeResult)

                    @app.route("/api/insert", methods=['GET', 'POST'])
                    def insert():
                        pass

                    if __name__ == "__main__":
                        app.run()

        section
            h1 8. 連接前後端
            code main.js
            pre
                code.hljs.js.
                    Vue.options.delimiters = ['<%', '%>'];

                    const searchInit = {
                        brand: null,
                        shift: null,
                        year: null,
                        region: null,
                        price: {
                            min: null,
                            max: null
                        },
                        displacement: {
                            min: null,
                            max: null
                        },
                        page: 1
                    };

                    var search = new Vue({
                        el: '#search',
                        data: {
                            brands: [],
                            shifts: [],
                            years: [],
                            regions: [],
                            selected: searchInit
                        },
                        beforeMount: function () {
                            this.distinct('brands');
                            this.distinct('shifts');
                            this.distinct('years');
                            this.distinct('regions');
                        },
                        beforeUpdate: function () {
                            
                        },
                        methods: {
                            distinct: function (target) {
                                let temp = this;
                                axios.post('api/distinct', {
                                    targetColumn: target
                                })
                                .then(function (response) {
                                    temp[target] = response.data;
                                })
                                .catch(function (error) {
                                    console.log(error);
                                });
                            },
                            sendSearch: function () {
                                axios.post('api/select', this.selected)
                                    .then(function (response) {
                                        app.cars = response.data;
                                        if (app.cars.length != 0) {
                                            app.isEmpty = false;
                                        }
                                        else {
                                            app.isEmpty = true;
                                        }
                                    })
                                    .catch(function (error) {
                                        console.log(error);
                                    });
                            },
                            sendNewSearch: function () {
                                pageButton.currentPage = 1;
                                this.changePage();
                            },
                            changePage: function () {
                                this.selected.page = pageButton.currentPage;
                                this.sendSearch();
                            }
                        }
                    });

                    var app = new Vue({
                        el: '#app',
                        data: {
                            cars: [],
                            isEmpty: false,
                        },
                        beforeMount: function () {
                            this.initTable();
                        },
                        methods:{
                            initTable: function () {
                                let temp = this;
                                axios.post('api/select', {})
                                    .then(function (response) {
                                        temp.cars = response.data;
                                    })
                                    .catch(function (error) {
                                        console.log(error);
                                    });
                            }
                        }
                    });

                    var pageButton = new Vue({
                        el: '#pageButton',
                        data: {
                            currentPage: 1
                        },
                        methods: {
                            firstPage: function () {
                                this.currentPage = 1;
                                search.changePage();
                            },
                            nextPage: function () {
                                if (app.cars.length == 0) {
                                    alert('已無資料!');
                                }
                                else {
                                    this.currentPage += 1;
                                    search.changePage();
                                }
                            },
                            previousPage: function () {
                                this.currentPage -= 1;
                                if (this.currentPage < 1) {
                                    this.currentPage = 1;
                                }
                                search.changePage();
                            }
                        }
                    });
            
    script(src='lib/js/head.min.js')
    script(src='js/reveal.js')
    script.
      // More info about config & dependencies:
      // - https://github.com/hakimel/reveal.js#configuration
      // - https://github.com/hakimel/reveal.js#dependencies
      Reveal.initialize({
      dependencies: [
      { src: 'plugin/markdown/marked.js' },
      { src: 'plugin/markdown/markdown.js' },
      { src: 'plugin/notes/notes.js', async: true },
      { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }
      ]
      });